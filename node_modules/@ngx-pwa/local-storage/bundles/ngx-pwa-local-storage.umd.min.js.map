{"version":3,"sources":["ng://@ngx-pwa/local-storage/lib/tokens.ts","ng://@ngx-pwa/local-storage/lib/databases/indexeddb-database.ts","ng://@ngx-pwa/local-storage/lib/databases/localstorage-database.ts","ng://@ngx-pwa/local-storage/lib/databases/mock-local-database.ts","ng://@ngx-pwa/local-storage/lib/databases/local-database.ts","null","ng://@ngx-pwa/local-storage/lib/validation/json-validator.ts","ng://@ngx-pwa/local-storage/lib/lib.service.ts"],"names":["LOCAL_STORAGE_PREFIX","InjectionToken","providedIn","factory","IndexedDBDatabase","prefix","this","dbName","database","ReplaySubject","connect","prototype","getItem","key","_this","transaction","pipe","map","get","mergeMap","request","success","fromEvent","event","result","dataPath","race","toErrorObservable","first","setItem","data","of","existingData","method","add","_a","put","_b","toSuccessObservable","removeItem","delete","clear","indexedDB","open","subscribe","objectStoreNames","contains","objectStoreName","createObjectStore","next","error","mode","objectStore","throwError","Error","message","Injectable","args","Optional","type","Inject","LocalStorageDatabase","userPrefix","unparsedData","localStorage","parsedData","JSON","parse","stringify","MockLocalDatabase","Map","rawData","undefined","set","localDatabaseFactory","platformId","isPlatformBrowser","window","useFactory","deps","PLATFORM_ID","__values","o","m","Symbol","iterator","i","call","length","value","done","JSONValidator","validate","schema","hasOwnProperty","const","enum","properties","items","validateEnum","validateType","validateItems","validateProperties","validateRequired","isObjectNotNull","Object","keys","property","required","tslib_1.__values","requiredProp","indexOf","validateString","validateNumber","Array","isArray","maxItems","Number","isInteger","minItems","uniqueItems","dataSet","Set","size","validateItemsList","data_1","data_1_1","maxLength","minLength","pattern","RegExp","test","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","LocalStorage","jsonValidator","options","getItemOptionsDefault","validation","setItemSubscribe","removeItemSubscribe","clearSubscribe","LocalDatabase","localStorageProviders","config","provide","useValue"],"mappings":"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","sourcesContent":["import { InjectionToken, Provider } from '@angular/core';\n\nexport const LOCAL_STORAGE_PREFIX = new InjectionToken<string>('localStoragePrefix', { providedIn: 'root', factory: () => '' });\n\nexport interface LocalStorageProvidersConfig {\n\n  /** Optional prefix to avoid collision in multiple apps on same subdomain */\n  prefix?: string;\n}\n\nexport function localStorageProviders(config: LocalStorageProvidersConfig): Provider[] {\n  return [\n    config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : []\n  ];\n}\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * IndexedDB database name for local storage\n   */\n  protected dbName = 'ngStorage';\n  /**\n   * IndexedDB object store name for local storage\n   */\n  protected readonly objectStoreName = 'localStorage';\n  /**\n   * IndexedDB key path name for local storage (where an item's key will be stored)\n   */\n  protected readonly keyPath = 'key';\n  /**\n   * IndexedDB data path name for local storage (where items' value will be stored)\n   */\n  protected readonly dataPath = 'value';\n  /**\n   * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected database: ReplaySubject<IDBDatabase>;\n\n  /**\n   * Connects to IndexedDB\n   */\n  constructor(@Optional() @Inject(LOCAL_STORAGE_PREFIX) protected prefix: string | null = null) {\n\n    if (prefix) {\n\n      this.dbName = `${prefix}_${this.dbName}`;\n\n    }\n\n    /* Creating the RxJS ReplaySubject */\n    this.database = new ReplaySubject<IDBDatabase>();\n\n    /* Connecting to IndexedDB */\n    this.connect();\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<TÂ | null> {\n\n    /* Opening a trasaction and requesting the item in local storage */\n    return this.transaction().pipe(\n      map((transaction) => transaction.get(key)),\n      mergeMap((request) => {\n\n        /* Listening to the success event, and passing the item value if found, null otherwise */\n        const success = (fromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result),\n          map((result) => result && (this.dataPath in result) ? (result[this.dataPath] as T) : null)\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (race(success, this.toErrorObservable(request, `getter`)) as Observable<T | null>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any): Observable<boolean> {\n\n    /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n    if (data == null) {\n\n      return of(true);\n\n    }\n\n    /* Opening a transaction and checking if the item already exists in local storage */\n    return this.getItem(key).pipe(\n      map((existingData) => (existingData == null) ? 'add' : 'put'),\n      mergeMap((method) => {\n\n        /* Opening a transaction */\n        return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n          let request: IDBRequest;\n\n          /* Adding or updating local storage, based on previous checking */\n          switch (method) {\n            case 'add':\n              request = transaction.add({ [this.dataPath]: data }, key);\n              break;\n            case 'put':\n            default:\n              request = transaction.put({ [this.dataPath]: data }, key);\n              break;\n          }\n\n          /* Merging success (passing true) and error events and autoclosing the observable */\n          return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)) as Observable<boolean>)\n            .pipe(first());\n\n        }));\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    /* Opening a transaction and checking if the item exists in local storage */\n    return this.getItem(key).pipe(\n      mergeMap((data) => {\n\n        /* If the item exists in local storage */\n        if (data != null) {\n\n          /* Opening a transaction */\n          return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n            /* Deleting the item in local storage */\n            const request = transaction.delete(key);\n\n            /* Merging success (passing true) and error events and autoclosing the observable */\n            return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)) as Observable<boolean>)\n              .pipe(first());\n\n          }));\n\n        }\n\n        /* Passing true if the item does not exist in local storage */\n        return of(true);\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear(): Observable<boolean> {\n\n    /* Opening a transaction */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transaction) => {\n\n        /* Deleting all items from local storage */\n        const request = transaction.clear();\n\n        /* Merging success (passing true) and error events and autoclosing the observable */\n        return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)) as Observable<boolean>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to IndexedDB and creates the object store on first time\n   */\n  protected connect(): void {\n\n    /* Connecting to IndexedDB */\n    const request = indexedDB.open(this.dbName);\n\n    /* Listening the event fired on first connection, creating the object store for local storage */\n    (fromEvent(request, 'upgradeneeded') as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Getting the database connection */\n        const database = (event.target as IDBRequest).result as IDBDatabase;\n\n        /* Checking if the object store already exists, to avoid error */\n        if (!database.objectStoreNames.contains(this.objectStoreName)) {\n\n          /* Creating the object store for local storage */\n          database.createObjectStore(this.objectStoreName);\n\n        }\n\n      });\n\n    /* Listening the success event and converting to an RxJS Observable */\n    const success = fromEvent(request, 'success') as Observable<Event>;\n\n    /* Merging success and errors events */\n    (race(success, this.toErrorObservable(request, `connection`)) as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Storing the database connection for further access */\n        this.database.next((event.target as IDBRequest).result as IDBDatabase);\n\n      }, (error) => {\n\n        this.database.error(error as Error);\n\n      });\n\n  }\n\n  /**\n   * Opens an IndexedDB transaction and gets the local storage object store\n   * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n   * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n   */\n  protected transaction(mode: 'readonly' | 'readwrite' = 'readonly'): Observable<IDBObjectStore> {\n\n    /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n    return this.database\n      .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));\n\n  }\n\n  /**\n   * Transforms a IndexedDB success event in an RxJS Observable\n   * @param request The request to listen\n   * @returns A RxJS Observable with true value\n   */\n  protected toSuccessObservable(request: IDBRequest): Observable<boolean> {\n\n    /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n    return (fromEvent(request, 'success') as Observable<Event>)\n      .pipe(map(() => true));\n\n  }\n\n  /**\n   * Transforms a IndexedDB error event in an RxJS ErrorObservable\n   * @param request The request to listen\n   * @param error Optionnal details about the error's origin\n   * @returns A RxJS ErrorObservable\n   */\n  protected toErrorObservable(request: IDBRequest, error = ``): Observable<never> {\n\n    /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n    return (fromEvent(request, 'error') as Observable<Event>)\n      .pipe(mergeMap(() => throwError(new Error(`IndexedDB ${error} issue : ${request.error.message}.`))));\n\n  }\n\n}\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /* Initializing native localStorage right now to be able to check its support on class instanciation */\n  protected prefix = '';\n\n  constructor(@Optional() @Inject(LOCAL_STORAGE_PREFIX) protected userPrefix: string | null = null) {\n\n    if (userPrefix) {\n      this.prefix = `${userPrefix}_`;\n    }\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<T | null> {\n\n    const unparsedData = localStorage.getItem(`${this.prefix}${key}`);\n    let parsedData: T | null = null;\n\n    if (unparsedData != null) {\n\n      try {\n        parsedData = JSON.parse(unparsedData);\n      } catch (error) {\n        return throwError(new Error(`Invalid data in localStorage.`));\n      }\n\n    }\n\n    return of(parsedData);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any): Observable<boolean> {\n\n    localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(data));\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    localStorage.removeItem(`${this.prefix}${key}`);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear(): Observable<boolean> {\n\n    localStorage.clear();\n\n    return of(true);\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockLocalDatabase implements LocalDatabase {\n\n  protected localStorage = new Map<string, any>();\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n   getItem<T = any>(key: string): Observable<T |Â null> {\n\n    const rawData: T | null = this.localStorage.get(key);\n\n    return of((rawData !== undefined) ? rawData : null);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any): Observable<boolean> {\n\n    this.localStorage.set(key, data);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string): Observable<boolean> {\n\n    this.localStorage.delete(key);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear(): Observable<boolean> {\n\n    this.localStorage.clear();\n\n    return of(true);\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID, Optional } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MockLocalDatabase } from './mock-local-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\nexport function localDatabaseFactory(platformId: Object, prefix: string | null) {\n\n  if (isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {\n\n    /* Try with IndexedDB in modern browsers */\n    return new IndexedDBDatabase(prefix);\n\n  } else if (isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {\n\n    /* Try with localStorage in old browsers (IE9) */\n    return new LocalStorageDatabase(prefix);\n\n  } else {\n\n    /* Fake database for server-side rendering (Universal) */\n    return new MockLocalDatabase();\n\n  }\n\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [\n    PLATFORM_ID,\n    [new Optional(), LOCAL_STORAGE_PREFIX]\n  ]\n})\nexport abstract class LocalDatabase {\n\n  abstract getItem<T = any>(key: string): Observable<T | null>;\n  abstract setItem(key: string, data: any): Observable<boolean>;\n  abstract removeItem(key: string): Observable<boolean>;\n  abstract clear(): Observable<boolean>;\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { JSONSchema } from './json-schema';\n\n/**\n * @todo Add other JSON Schema validation features\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a JSON Schema\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema.\n   * Types are enforced to validate everything:\n   * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.\n   * Therefore, unlike the spec, booleans are not allowed as schemas.\n   * Not all validation features are supported: just follow the interface.\n   * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n   */\n  validate(data: any, schema: JSONSchema): boolean {\n\n    /** @todo When TS 2.8, explore if this is possible with conditional types */\n    if (((!(schema.hasOwnProperty('const') && schema.const !== undefined)\n    && !(schema.hasOwnProperty('enum') && schema.enum != null) && !(schema.hasOwnProperty('type') && schema.type != null))\n    || schema.type === 'array' || schema.type === 'object')\n    && !(schema.hasOwnProperty('properties') && schema.properties != null)  && !(schema.hasOwnProperty('items') && schema.items != null)) {\n\n      throw new Error(`Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.`);\n\n    }\n\n    if (schema.hasOwnProperty('const') && schema.const !== undefined && (data !== schema.const)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateType(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateItems(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateProperties(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateRequired(data, schema)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  protected isObjectNotNull(value: any): boolean {\n\n    return (value !== null) && (typeof value === 'object');\n\n  }\n\n  protected validateProperties(data: { [k: string]: any; }, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('properties') || (schema.properties == null)) {\n      return true;\n    }\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    /**\n     * Check if the object doesn't have more properties than expected\n     * Equivalent of additionalProperties: false\n     */\n    if (Object.keys(schema.properties).length !== Object.keys(data).length) {\n\n      return false;\n\n    }\n\n    /* Recursively validate all properties */\n    for (const property in schema.properties) {\n\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n\n          return false;\n\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateRequired(data: {}, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('required') || (schema.required == null)) {\n      return true;\n    }\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    for (const requiredProp of schema.required) {\n\n      /* Checks if the property is present in the schema 'properties' */\n      if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {\n\n        throw new Error(`'required' properties must be described in 'properties' too.`);\n\n      }\n\n      /* Checks if the property is present in the data */\n      if (!data.hasOwnProperty(requiredProp)) {\n\n        return false;\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateEnum(data: any, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('enum') || (schema.enum == null)) {\n      return true;\n    }\n\n    /** @todo Move to ES2016 .includes() ? */\n    return (schema.enum.indexOf(data) !== -1);\n\n  }\n\n  protected validateType(data: any, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('type') || (schema.type == null)) {\n      return true;\n    }\n\n    switch (schema.type) {\n\n      case 'null':\n        return data === null;\n      case 'string':\n        return this.validateString(data, schema);\n      case 'number':\n      case 'integer':\n        return this.validateNumber(data, schema);\n      case 'boolean':\n        return typeof data === 'boolean';\n      case 'object':\n        return typeof data === 'object';\n      case 'array':\n        return Array.isArray(data);\n\n    }\n\n  }\n\n  protected validateItems(data: any[], schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('items') || (schema.items == null)) {\n      return true;\n    }\n\n    if (!Array.isArray(data)) {\n\n      return false;\n\n    }\n\n    if (schema.hasOwnProperty('maxItems') && (schema.maxItems != null)) {\n\n      if (!Number.isInteger(schema.maxItems) || schema.maxItems < 0) {\n\n        throw new Error(`'maxItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minItems') && (schema.minItems != null)) {\n\n      if (!Number.isInteger(schema.minItems) || schema.minItems < 0) {\n\n        throw new Error(`'minItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('uniqueItems') && (schema.uniqueItems != null)) {\n\n      if (schema.uniqueItems) {\n\n        const dataSet = new Set(data);\n\n        if (data.length !== dataSet.size) {\n          return false;\n        }\n\n      }\n\n    }\n\n    if (Array.isArray(schema.items)) {\n\n      return this.validateItemsList(data, schema);\n\n    }\n\n    for (const value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateItemsList(data: any, schema: JSONSchema): boolean {\n\n    const items = schema.items as JSONSchema[];\n\n    if (data.length !== items.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < items.length; i += 1) {\n\n      if (!this.validate(data[i], items[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateString(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('maxLength') && (schema.maxLength != null)) {\n\n      if (!Number.isInteger(schema.maxLength) || schema.maxLength < 0) {\n\n        throw new Error(`'maxLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minLength') && (schema.minLength != null)) {\n\n      if (!Number.isInteger(schema.minLength) || schema.minLength < 0) {\n\n        throw new Error(`'minLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('pattern') && (schema.pattern != null)) {\n\n      const regularExpression = new RegExp(schema.pattern);\n\n      if (!regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateNumber(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('multipleOf') && (schema.multipleOf != null)) {\n\n      if (schema.multipleOf <= 0) {\n\n        throw new Error(`'multipleOf' must be a number strictly greater than 0.`);\n\n      }\n\n      if (!Number.isInteger(data / schema.multipleOf)) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('maximum') && (schema.maximum != null)) {\n\n      if (data > schema.maximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMaximum') && (schema.exclusiveMaximum != null)) {\n\n      if (data >= schema.exclusiveMaximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minimum') && (schema.minimum != null)) {\n\n      if (data < schema.minimum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMinimum') && (schema.exclusiveMinimum != null)) {\n\n      if (data <= schema.exclusiveMinimum) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { LocalDatabase } from './databases/local-database';\nimport { JSONSchema } from './validation/json-schema';\nimport { JSONValidator } from './validation/json-validator';\n\nexport interface LSGetItemOptions {\n  schema?: JSONSchema | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  protected readonly getItemOptionsDefault: LSGetItemOptions = {\n    schema: null\n  };\n\n  constructor(protected database: LocalDatabase, protected jsonValidator: JSONValidator) {}\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string, options: LSGetItemOptions = this.getItemOptionsDefault): Observable<T | null> {\n\n    return this.database.getItem<T>(key).pipe(\n\n      /* Validate data upon a json schema if requested */\n      mergeMap((data) => {\n\n        if (options.schema && data !== null) {\n\n          let validation = true;\n\n          try {\n            validation = this.jsonValidator.validate(data, options.schema);\n          } catch (error) {\n            return throwError(error);\n          }\n\n          if (!validation) {\n            return throwError(new Error(`JSON invalid`));\n          }\n\n        }\n\n        return of(data);\n\n      }));\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any): Observable<boolean> {\n\n    return this.database.setItem(key, data);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string): Observable<boolean> {\n\n    return this.database.removeItem(key);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear(): Observable<boolean> {\n\n    return this.database.clear();\n\n  }\n\n  /**\n   * Sets an item in local storage, and auto-subscribes\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   */\n  setItemSubscribe(key: string, data: any): void {\n\n    this.setItem(key, data).subscribe(() => {}, () => {});\n\n  }\n\n  /**\n   * Deletes an item in local storage, and auto-subscribes\n   * @param key The item's key\n   */\n   removeItemSubscribe(key: string): void {\n\n    this.removeItem(key).subscribe(() => {}, () => {});\n\n  }\n\n  /** Deletes all items from local storage, and auto-subscribes */\n  clearSubscribe(): void {\n\n    this.clear().subscribe(() => {}, () => {});\n\n  }\n\n}\n"]}